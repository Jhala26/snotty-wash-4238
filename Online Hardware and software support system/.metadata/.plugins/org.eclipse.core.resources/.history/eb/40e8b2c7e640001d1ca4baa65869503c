package com.masai.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.masai.bean.Complain;
import com.masai.bean.Employee;
import com.masai.bean.Engineer;
import com.masai.bean.Hod;
import com.masai.exception.EmployeeException;
import com.masai.exception.EngineerException;
import com.masai.exception.HodException;
import com.masai.utility.DBUtil;

public class SupportDaoImpl implements SupportDao {
	
	
	
//	Override  Method Defination of loginHod() Interface method

	@Override
	public Hod loginHod(String username, String password) throws HodException {
		
		Hod hod = null;
		
		
		
		try (Connection conn = DBUtil.provideConnection()){
			
			PreparedStatement ps = conn.prepareStatement("select * from hod where Husername = ? AND Hpassword = ?");
			
			ps.setString(1, username);
			ps.setString(2, password);
	
			ResultSet rs = ps.executeQuery();
			
			
			if(rs.next()) {
				
				int hodId = rs.getInt("HodId");
				String hodName = rs.getString("Hname");
				String hodUsername = rs.getNString("Husername");
				String hodPassword = rs.getString("Hpassword");
				
				hod = new Hod(hodId, hodName, hodUsername, hodPassword);
				
				
			}
			else {
				throw new HodException("Invalid Username or password..");
			}
			
			
			
			
		} catch (SQLException e) {
			
			throw new HodException(e.getMessage());
			
		}
		
		
		
		
				
				
		
		return hod;
	}
	
	
	
	
	
	
//	Override  Method Defination of registerEngineer() Interface method

	@Override
	public String registerEngineer(Engineer engineer) {
		
		String message = "Not Inserted..";
		
		
		try (Connection conn = DBUtil.provideConnection()){
			
			PreparedStatement ps = conn.prepareStatement("insert into engineer(EngName,EngUsername,EngPassword,Category) values(?,?,?,?)");

			ps.setString(1, engineer.getEngName());
			ps.setString(2, engineer.getEngUsername());
			ps.setString(3, engineer.getEngPassword());
			ps.setString(4, engineer.getCategory());
			
			int res = ps.executeUpdate();
			
			if(res > 0) {
				message = "Engineer Registered Sucessfully........!";
			}
			
			
		} catch (SQLException e) {
			
			message = e.getMessage();
		}
		
		
		
		return message;
	}




//	Override  Method defination of getAllRegisterEngineer() Interface method

	@Override
	public List<Engineer> getAllRegisterEngineer() throws EngineerException {
		
		List<Engineer> engineer = new ArrayList<>();
		
		
		try (Connection conn = DBUtil.provideConnection()){
			
			PreparedStatement ps = conn.prepareStatement("select * from engineer");
			
			ResultSet rs = ps.executeQuery();
			
			
			while(rs.next()) {
				
				
				int engId = rs.getInt("EngId");
				String engName = rs.getNString("EngName");
				String engUsername = rs.getString("EngUsername");
				String engPassword = rs.getString("EngPassword");
				String category = rs.getString("Category");
				
				Engineer eng = new Engineer(engId, engName, engUsername, engPassword, category);
				
				engineer.add(eng);
				
			}
			
			
		} catch (SQLException e) {
			
			throw new EngineerException(e.getMessage());
			
		}
		
		if(engineer.size() == 0) {
			
			throw new EngineerException("No Engineer found..");
		}
		
		
		return engineer;
	}




//	Override  Method defination of deleteEngineer() Interface method

	@Override
	public String deleteEngineer(int engId) {
		
		 String message = "Engineer record does not exist";
		
		
		try (Connection conn = DBUtil.provideConnection()){
			
			
			PreparedStatement ps = conn.prepareStatement("delete from Engineer where EngId = ?");
			
			ps.setInt(1, engId);

			int res = ps.executeUpdate();
			
			if(res > 0) {
				message = "Engineer record deleted successfully";
			}
			
			
		} catch (SQLException e) {
			
			message = e.getMessage();
			
		}
		
		
		return message;
	}


// Employee section.............

//	Override  Method defination of registerEmployee() Interface method

	@Override
	public String registerEmployee(Employee employee) {
		
		String message = "Not Inserted..";
		
		
		try (Connection conn = DBUtil.provideConnection()){
			
			PreparedStatement ps = conn.prepareStatement("insert into employee values(?,?,?,?)");

			ps.setInt(1, employee.getEmpId());
			ps.setString(2, employee.getEmpName());
			ps.setString(3, employee.getEmpUsername());
			ps.setString(4, employee.getEmpPassword());
			
			int res = ps.executeUpdate();
			
			if(res > 0) {
				message = "Employee Registered Sucessfully........!";
			}
			
			
		} catch (SQLException e) {
			
			message = e.getMessage();
		}
		
		
		
		return message;
		
	}



//	Override  Method defination of loginEmployee() Interface method


	@Override
	public Employee loginEmployee(String username, String password) throws EmployeeException {


			Employee employee = null;
		
		
		
		try (Connection conn = DBUtil.provideConnection()){
			
			PreparedStatement ps = conn.prepareStatement("select * from employee where EmpUsername = ? AND EmpPassword = ?");
			
			ps.setString(1, username);
			ps.setString(2, password);
	
			ResultSet rs = ps.executeQuery();
			
			
			if(rs.next()) {
				
				int EmpId = rs.getInt("EmpId");
				String EmpName = rs.getString("EmpName");
				String EmpUsername = rs.getNString("EmpUsername");
				String EmpPassword = rs.getString("EmpPassword");
				
				employee = new Employee(EmpId, EmpName, EmpUsername, EmpPassword);
				
				
			}
			else {
				throw new EmployeeException("Invalid Username or password..");
			}
			
			
			
			
		} catch (SQLException e) {
			
			throw new EmployeeException(e.getMessage());
			
		}
		
		
	
		return employee;
		
	}




//	Override  Method defination of registerComplain() Interface method

	@Override
	public Complain registerComplain(Complain complain) {
		
		Complain compl = null;
		
		
		String message = "Not Inserted..";
		
		
		try (Connection conn = DBUtil.provideConnection()){
			
			PreparedStatement ps = conn.prepareStatement("insert into complain(ComType,EmplId,CompStatus,Description) values(?,?,?,?)");

			ps.setString(1, complain.getComType());
			ps.setInt(2, complain.getEmplId());
			ps.setString(3, "Unsolved");
			ps.setString(4, complain.getDescription());
			
			int res = ps.executeUpdate();
			
			if(res > 0) {
				message = "Employee Registered Sucessfully........!";
				
				
				PreparedStatement ps2 = conn.prepareStatement("select * from complain where ComType = ? AND EmplId = ?  AND CompStatus = ?");
				
				
				
				
				
			}
			
			
		} catch (SQLException e) {
			
			message = e.getMessage();
			
		}
		
		
		System.out.println(message);
		
		
		return compl;
	}
	
	
	

}
